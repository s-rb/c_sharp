using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FinanceApp
{
    class Program
    {
        /*Задание 1.
         Заказчик просит вас написать приложение по учёту финансов
         и продемонстрировать его работу.
         Суть задачи в следующем: 
         Руководство фирмы по 12 месяцам ведет учет расходов и поступлений средств.
         За год получены два массива – расходов и поступлений.
         Определить прибыли по месяцам
         Количество месяцев с положительной прибылью.
         Добавить возможность вывода трех худших показателей по месяцам, с худшей прибылью,
         если есть несколько месяцев, в некоторых худшая прибыль совпала - вывести их все.
         Организовать дружелюбный интерфейс взаимодействия и вывода данных на экран

         Пример


         Месяц Доход, тыс. руб.Расход, тыс.руб.Прибыль, тыс.руб.
             1              100 000             80 000                 20 000
             2              120 000             90 000                 30 000
             3               80 000             70 000                 10 000
             4               70 000             70 000                      0
             5              100 000             80 000                 20 000
             6              200 000            120 000                 80 000
             7              130 000            140 000 - 10 000
             8              150 000             65 000                 85 000
             9              190 000             90 000                100 000
            10              110 000             70 000                 40 000
            11              150 000            120 000                 30 000
            12              100 000             80 000                 20 000


         Худшая прибыль в месяцах: 7, 4, 1, 5, 12
         Месяцев с положительной прибылью: 10

        *Задание 3.1
         Заказчику требуется приложение позволяющщее умножать математическую матрицу на число
         Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
        Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матрицы_на_число
         Добавить возможность ввода количество строк и столцов матрицы и число,
         на которое будет производиться умножение.
         Матрицы заполняются автоматически.
         Если по введённым пользователем данным действие произвести невозможно -сообщить об этом


         Пример

              | 1  3  5 |   | 5  15  25 |
       5 х | 4  5  7 | = | 20  25  35 |

         | 5  3  1 |   | 25  15   5 |


  **Задание 3.2
         Заказчику требуется приложение позволяющщее складывать и вычитать математические матрицы
         Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
        Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Сложение_матриц
         Добавить возможность ввода количество строк и столцов матрицы.
         Матрицы заполняются автоматически
         Если по введённым пользователем данным действие произвести невозможно - сообщить об этом


         Пример
          | 1  3  5 |   | 1  3  4 |   | 2   6   9 |

     | 4  5  7 | + | 2  5  6 | = | 6  10  13 |

| 5  3  1 |   | 3  6  7 |   | 8   9   8 |



| 1  3  5 |   | 1  3  4 |   | 0   0   1 |

| 4  5  7 | - | 2  5  6 | = | 2   0   1 |

| 5  3  1 |   | 3  6  7 |   | 2 - 3 - 6 |

***Задание 3.3
         Заказчику требуется приложение позволяющщее перемножать математические матрицы
         Справка https://ru.wikipedia.org/wiki/Матрица_(математика)
        Справка https://ru.wikipedia.org/wiki/Матрица_(математика)#Умножение_матриц
         Добавить возможность ввода количество строк и столцов матрицы.
         Матрицы заполняются автоматически
         Если по введённым пользователем данным действие произвести нельзя - сообщить об этом


          | 1  3  5 |   | 1  3  4 |   | 22  48  57 |

      | 4  5  7 | х | 2  5  6 | = | 35  79  95 |

  | 5  3  1 |   | 3  6  7 |   | 14  36  45 |



              | 4 |

| 1  2  3 | х | 5 | = | 32 |

             | 6 |

*/

        static void Main(string[] args)
        {
            int[] incomeArray =
                { 100000, 120000, 180000, 70000, 100000, 200000, 130000, 150000, 190000, 110000, 150000, 100000 };
            int[] expenseArray =
                { 80000, 90000, 70000, 70000, 80000, 120000, 140000, 65000, 90000, 70000, 120000, 80000 };
            int[] profitArray = new int[12];
            string[] months =
            {
                "январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь",
                "декабрь"
            };
            int NUMBER_OF_WORST_PROFITS = 3;

            // Определяем и выводим прибыли
            Console.WriteLine($"{"Месяц",15}{"Доход, тыс.руб.",20}{"Расход, тыс.руб.",20}{"Прибыль, тыс.руб.",20}");
            for (int i = 0; i < 12; i++)
            {
                profitArray[i] = incomeArray[i] - expenseArray[i];
                Console.WriteLine($"{months[i],15}{incomeArray[i],20}{expenseArray[i],20}{profitArray[i],20}");
            }

            // Находим и выводим месяцы с положительной прибылью
            int positiveProfitMonths = 0;
            int[] worstProfitsArray = new int[NUMBER_OF_WORST_PROFITS];

            for (int i = 0; i < 12; i++)
            {
                int profit = profitArray[i];
                if (profit > 0)
                {
                    positiveProfitMonths++;
                }
            }
            Console.WriteLine($"Месяцев с положительной прибылью: {positiveProfitMonths}");

            // Находим заданное количество худших прибылей (не повторяясь)
            for (int i = 0; i < NUMBER_OF_WORST_PROFITS; i++)
            {
                int worstProfit = profitArray[i]; // Запоминаем базовый профит и далее сверяем последовательно с ним остальные

                for (int j = i + 1; j < profitArray.Length; j++)
                {
                    int currentProfit = profitArray[j];
                    if (currentProfit < worstProfit) // Если найден профит меньше базового, то проверяем не добавили ли мы уже такой
                    {
                        bool isExists = false;
                        if (i > 0)
                        {
                            for (int k = 0; k < i; k++) // Перебираем массив с худшими профитами worstProfitsArray
                            {
                                if (worstProfitsArray[k] == currentProfit) // Нашли такой профит, значит пропускаем
                                {
                                    isExists = true;
                                    break;
                                }
                            }
                        }

                        if (!isExists) // Если такой профит в массиве еще не встречается, то запоминаем текущий профит как худший
                        {
                            worstProfit = currentProfit;
                        }
                    }
                }

                worstProfitsArray[i] = worstProfit;
            }
            
            // На основании запомненных профитов, составляем строку вывода с месяцами с такими профитами
            string worstProfitMonthString = "";
            for (int i = 0; i < profitArray.Length; i++)
            {
                int currentProfit = profitArray[i];
                foreach (var currentWorstProfit in worstProfitsArray)
                {
                    if (currentProfit != currentWorstProfit) continue;
                    if (worstProfitMonthString == "")
                    {
                        worstProfitMonthString += (i + 1);
                    }
                    else
                    {
                        worstProfitMonthString += (", " + (i + 1));
                    }
                }
            }

            Console.WriteLine($"Худшая прибыль в месяцах: {worstProfitMonthString}");
            Console.ReadKey();
        }
    }
}